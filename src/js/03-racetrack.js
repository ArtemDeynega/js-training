import '../css/common.css';

const horses = [
    'Secretariat',
    'Eclipse',
    'West Australian',
    'Flying Fox',
    'Seabiscuit',
];
const refs = {
    startBtn: document.querySelector('.js-start-race'),
    winnerField: document.querySelector('.js-winner'),
    progressField: document.querySelector('.js-progress'),
    tableBody: document.querySelector(
        '.js-results-table > tbody',
    ),
};

refs.startBtn.addEventListener('click', onStart);

function onStart() {
    const promises = horses.map(run);
    updateWinnerField('');

    updateProgressDield(
        'ü§ñ –ó–∞–µ–∑–¥ –Ω–∞—á–∞–ª—Å—è, —Å—Ç–∞–≤–∫–∏ –Ω–µ –ø—Ä–∏–Ω–∏–º–∞—é—Ç—Å—è!',
    );
    datermineWinner(promises);

    waitForAll(promises);
}

function updateWinnerField(message) {
    refs.winnerField.textContent = message;
}

function updateProgressDield(message) {
    refs.progressField.textContent = message;
}

function updateResultTable({ horse, time }) {
    const tr = `<tr><td>0</td><td>${horse}</td><td>${time}</td></tr>`;

    refs.tableBody.insertAdjacentHTML('beforeend', tr);
}

function datermineWinner(horsesP) {
    Promise.race(horsesP).then(({ horse, time }) => {
        updateWinnerField(
            `üèÜ –ü–æ–±–µ–¥–∏–ª ${horse}, —Ñ–∏–Ω–∏—à–∏—Ä–æ–≤–∞–≤ –∑–∞ ${time} –≤—Ä–µ–º–µ–Ω–∏`,
        );
        updateResultTable({ horse, time });
    });
}
function waitForAll(horsesF) {
    Promise.all(horsesF).then(() => {
        updateProgressDield(
            `üèÅ –ó–∞–µ–∑–¥ –æ–∫–æ–Ω—á–µ–Ω, –ø—Ä–∏–Ω–∏–º–∞—é—Ç—Å—è —Å—Ç–∞–≤–∫–∏!`,
        );
    });
}

// console.log(
//     `%c üèÜ –ü–æ–±–µ–¥–∏–ª ${1}, —Ñ–∏–Ω–∏—à–∏—Ä–æ–≤–∞–≤ –∑–∞ ${1} –≤—Ä–µ–º–µ–Ω–∏`,
//     'color: green; font-size: 14px',
// );

// console.log(
//     `%c üèÅ –ó–∞–µ–∑–¥ –æ–∫–æ–Ω—á–µ–Ω, –ø—Ä–∏–Ω–∏–º–∞—é—Ç—Å—è —Å—Ç–∞–≤–∫–∏!`,
//     'color: yellow; font-size: 14px',
// );

function run(horse) {
    return new Promise((resolve, reject) => {
        const time = getRandomTime(2000, 3500);
        setTimeout(() => {
            resolve({ horse, time });
        }, time);
    });
}

// run('Mango').then(x => console.log(x));

/*
 * Promise.race([]) –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è –ø–µ—Ä–≤–æ–≥–æ –≤—ã–ø–æ–ª–Ω–∏–≤—à–µ–≥–æ—Å—è –ø—Ä–æ–º–∏—Å–∞
 */
// Promise.race(promises).then(({ horse, time }) => {
//     console.log(
//         `%c üèÜ –ü–æ–±–µ–¥–∏–ª ${horse}, —Ñ–∏–Ω–∏—à–∏—Ä–æ–≤–∞–≤ –∑–∞ ${time} –≤—Ä–µ–º–µ–Ω–∏`,
//         'color: green; font-size: 14px',
//     );
// });
/*
 * Promise.all([]) –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è –≤—Å–µ—Ö –ø—Ä–æ–º–∏—Å–æ–≤
 */
// Promise.all(promises).then(() =>
//     console.log(
//         `%c üèÅ –ó–∞–µ–∑–¥ –æ–∫–æ–Ω—á–µ–Ω, –ø—Ä–∏–Ω–∏–º–∞—é—Ç—Å—è —Å—Ç–∞–≤–∫–∏!`,
//         'color: yellow; font-size: 14px',
//     ),
// );

function getRandomTime(min, max) {
    return Math.floor(
        Math.random() * (max - min + 1) + min,
    );
}
